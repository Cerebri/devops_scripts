hub:
  #  baseUrl: hub
  db:
    type: sqlite-memory
  extraConfig: |-
    from kubespawner import KubeSpawner
    from tornado import gen
    import yaml

    class CustomKubeSpawner(KubeSpawner):
        def get_env(self):
            env = super().get_env()

            env['KG_HTTP_USER'] =  self.user.name
            env['KERNEL_USERNAME'] =  self.user.name

            return env
    c.JupyterHub.spawner_class = CustomKubeSpawner
    config = '/etc/jupyter/jupyter_notebook_config.py'
    c.Spawner.cmd = ['jupyter-labhub']

proxy:
  secretToken: "1be7550452613d3f1e95c687598c8e4a95e64fbc9efcba374fed187fc254c53f"
  service:
    annotations: {
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    }

auth:
  admin:
    users:
      - root
      - jovyan

ingress:
  enabled: true
  hosts:
    - sb2--ingress.cerebri.internal

singleuser:
  defaultUrl: "/lab"
  image:
    name: cerebriai/nb2kg
    tag: dev
  storage:
    dynamic:
      storageClass: default
  extraEnv:
    KG_URL: http://enterprise-gateway.enterprise-gateway.svc.cluster.local:8888
    KG_REQUEST_TIMEOUT: "600"

prePuller:
  continuous:
    # NOTE: if used with a Cluster Autoscaler, also add user-placeholders
    enabled: true
  extraImages:
    enterprise-gateway:
      name: elyra/enterprise-gateway
      tag: dev
    kernel-py:
      name: elyra/kernel-py
      tag: dev
    kernel-tf-py:
      name: elyra/kernel-tf-py
      tag: dev
    kernel-r:
      name: elyra/kernel-r
      tag: dev
    kernel-scala:
      name: elyra/kernel-scala
      tag: dev
    kernel-spark-r:
      name: elyra/kernel-spark-r
      tag: dev
    kernel-spark-py:
      name: elyra/kernel-spark-py
      tag: dev

rbac:
  enabled: true

debug:
  enabled: true
